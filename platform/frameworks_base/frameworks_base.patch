From 8f447265e350e38d3e629306abcfba32be333039 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 15 Nov 2014 14:50:29 +0700
Subject: [PATCH 1/5] TelephonyManager: set properties in Broadcom-style as
 expected by RIL

For i9082

Change-Id: I475fdd164b3316720387fefb14a3e12fbc262b39
---
 .../java/android/telephony/TelephonyManager.java   | 69 +++++++---------------
 1 file changed, 20 insertions(+), 49 deletions(-)

diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index a225539..e8a7aba 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -2801,44 +2801,16 @@ public class TelephonyManager {
      * @hide
      */
     public static void setTelephonyProperty(String property, long subId, String value) {
-        String propVal = "";
-        String p[] = null;
-        String prop = SystemProperties.get(property);
         int phoneId = SubscriptionManager.getPhoneId(subId);
 
-        if (value == null) {
-            value = "";
-        }
-
-        if (prop != null) {
-            p = prop.split(",");
-        }
-
-        if (phoneId < 0) return;
-
-        for (int i = 0; i < phoneId; i++) {
-            String str = "";
-            if ((p != null) && (i < p.length)) {
-                str = p[i];
-            }
-            propVal = propVal + str + ",";
-        }
-
-        propVal = propVal + value;
-        if (p != null) {
-            for (int i = phoneId + 1; i < p.length; i++) {
-                propVal = propVal + "," + p[i];
-            }
-        }
-
-        // TODO: workaround for QC
-        if (property.length() > SystemProperties.PROP_NAME_MAX || propVal.length() > SystemProperties.PROP_VALUE_MAX) {
-            Rlog.d(TAG, "setTelephonyProperty length too long:" + property + ", " + propVal);
+        if (phoneId < 0) {
             return;
+        } else if (phoneId > 0) {
+            property += "_" + phoneId;
         }
 
-        Rlog.d(TAG, "setTelephonyProperty property=" + property + " propVal=" + propVal);
-        SystemProperties.set(property, propVal);
+        Rlog.d(TAG, "setTelephonyProperty property=" + property + " propVal=" + value);
+        SystemProperties.set(property, value);
     }
 
     /**
@@ -2929,16 +2901,16 @@ public class TelephonyManager {
      * @hide
      */
     public static String getTelephonyProperty(String property, long subId, String defaultVal) {
-        String propVal = null;
         int phoneId = SubscriptionManager.getPhoneId(subId);
-        String prop = SystemProperties.get(property);
-        if ((prop != null) && (prop.length() > 0)) {
-            String values[] = prop.split(",");
-            if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
-                propVal = values[phoneId];
-            }
+
+        if (phoneId < 0) {
+            return defaultVal;
+        } else if (phoneId > 0) {
+            property += "_" + phoneId;
         }
-        return propVal == null ? defaultVal : propVal;
+
+        String propVal = SystemProperties.get(property);
+        return propVal.isEmpty() ? defaultVal : propVal;
     }
 
     /**
@@ -2947,15 +2919,14 @@ public class TelephonyManager {
      * @hide
      */
     public static int getTelephonyProperty(String property, int slotId, int defaultVal) {
-        String propVal = null;
-        String prop = SystemProperties.get(property);
-        if ((prop != null) && (prop.length() > 0)) {
-            String values[] = prop.split(",");
-            if ((slotId >= 0) && (slotId < values.length) && (values[slotId] != null)) {
-                propVal = values[slotId];
-            }
+        if (slotId < 0) {
+            return defaultVal;
+        } else if (slotId > 0) {
+            property += "_" + slotId;
         }
-        return propVal == null ? defaultVal : Integer.parseInt(propVal);
+
+        String propVal = SystemProperties.get(property);
+        return propVal.isEmpty() ? defaultVal : Integer.parseInt(propVal);
     }
 
     /** @hide */
-- 
1.9.3 (Apple Git-50)


From 01e017e75569a105a8a96219a1e45c9180129234 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 15 Nov 2014 22:33:16 +0700
Subject: [PATCH 2/5] Camera: HACK: i9082: API hacks

CTS 5.0 requires the presence of an auto mode, so applications
may try to use auto without checking.

Also change ENODEV to MAX_CAMERAS_IN_USE to please the CTS

Change-Id: I929feffa4f79c69e9d7be7d1acacb3c228280bfe
---
 core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java | 2 +-
 core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java  | 2 +-
 core/java/android/hardware/camera2/utils/CameraBinderDecorator.java | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java b/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
index 8376e7c..a1decec 100644
--- a/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
+++ b/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
@@ -1040,7 +1040,7 @@ public class LegacyMetadataMapper {
                 return CONTROL_AE_ANTIBANDING_MODE_OFF;
             }
             case Camera.Parameters.ANTIBANDING_50HZ: {
-                return CONTROL_AE_ANTIBANDING_MODE_50HZ;
+                return /* CONTROL_AE_ANTIBANDING_MODE_50HZ */ CONTROL_AE_ANTIBANDING_MODE_AUTO;
             }
             case Camera.Parameters.ANTIBANDING_60HZ: {
                 return CONTROL_AE_ANTIBANDING_MODE_60HZ;
diff --git a/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java b/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
index 61f7b8b..f370103 100644
--- a/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
+++ b/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
@@ -617,7 +617,7 @@ public class LegacyRequestMapper {
                 return Parameters.ANTIBANDING_60HZ;
             }
             case CONTROL_AE_ANTIBANDING_MODE_AUTO: {
-                return Parameters.ANTIBANDING_AUTO;
+                return Parameters.ANTIBANDING_50HZ /* Parameters.ANTIBANDING_AUTO */;
             }
             default: {
                 return null;
diff --git a/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java b/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
index d461bca..a34a758 100644
--- a/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
+++ b/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
@@ -124,7 +124,7 @@ public class CameraBinderDecorator {
             case EUSERS:
                 throw new CameraRuntimeException(MAX_CAMERAS_IN_USE);
             case ENODEV:
-                throw new CameraRuntimeException(CAMERA_DISCONNECTED);
+                throw new CameraRuntimeException(/*CAMERA_DISCONNECTED*/ MAX_CAMERAS_IN_USE);
             case EOPNOTSUPP:
                 throw new CameraRuntimeException(CAMERA_DEPRECATED_HAL);
             case INVALID_OPERATION:
-- 
1.9.3 (Apple Git-50)


From 78f33d2faf475f5eda3cc001b2bd58dfb6c7ba29 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 21 Dec 2014 16:23:31 +0700
Subject: [PATCH 3/5] PowerManagerService: only turn on button light when any
 button is pressed

This more closely emulates stock Samsung behavior

Change-Id: I6b15c45b713bcbc290a1026805c46109060f9990
---
 .../core/java/com/android/server/power/PowerManagerService.java   | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
index 05051d2..a1d8987 100644
--- a/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/services/core/java/com/android/server/power/PowerManagerService.java
@@ -241,6 +241,7 @@ public final class PowerManagerService extends SystemService
     // Timestamp of the last call to user activity.
     private long mLastUserActivityTime;
     private long mLastUserActivityTimeNoChangeLights;
+    private long mLastButtonActivityTime;
 
     // Timestamp of last interactive power hint.
     private long mLastInteractivePowerHintTime;
@@ -1135,6 +1136,11 @@ public final class PowerManagerService extends SystemService
                     return true;
                 }
             } else {
+                if (eventTime > mLastButtonActivityTime && (event & PowerManager.USER_ACTIVITY_EVENT_BUTTON) != 0) {
+                    mLastButtonActivityTime = eventTime;
+                    mDirty |= DIRTY_USER_ACTIVITY;
+                }
+
                 if (eventTime > mLastUserActivityTime) {
                     mLastUserActivityTime = eventTime;
                     mDirty |= DIRTY_USER_ACTIVITY;
@@ -1635,7 +1641,7 @@ public final class PowerManagerService extends SystemService
                         }
 
                         mKeyboardLight.setBrightness(mKeyboardVisible ? keyboardBrightness : 0);
-                        if (mButtonTimeout != 0 && now > mLastUserActivityTime + mButtonTimeout) {
+                        if (mButtonTimeout != 0 && now > mLastButtonActivityTime + mButtonTimeout) {
                              mButtonsLight.setBrightness(0);
                         } else {
                             mButtonsLight.setBrightness(buttonBrightness);
-- 
1.9.3 (Apple Git-50)


From 5e097f95b1c1f813da86236e53c434e9e6576b21 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Fri, 6 Feb 2015 18:20:12 +0700
Subject: [PATCH 4/5] Revert "Remove pointless notification drawer network info
 label in MSIM mode."

It's not completely pointless. There's no way to check the name of
the 2 networks without going back to the lock screen.

This reverts commit 20576fe8b2fb68fc9d25e19ebcceeee78f08590c.

Change-Id: I502de09208d6b7ce5969d605db26b069fbb29f5b
---
 .../res/layout/msim_status_bar_expanded.xml        |  6 ++++
 .../systemui/statusbar/phone/PhoneStatusBar.java   | 39 +++++++++++++++++-----
 .../policy/MSimNetworkControllerImpl.java          | 24 ++++++++++---
 3 files changed, 56 insertions(+), 13 deletions(-)

diff --git a/packages/SystemUI/res/layout/msim_status_bar_expanded.xml b/packages/SystemUI/res/layout/msim_status_bar_expanded.xml
index ad8b71f..b7e9a8b 100644
--- a/packages/SystemUI/res/layout/msim_status_bar_expanded.xml
+++ b/packages/SystemUI/res/layout/msim_status_bar_expanded.xml
@@ -29,6 +29,12 @@
     android:background="@android:color/transparent"
     >
 
+   <include
+            layout="@layout/subs_label"
+            android:layout_height="@dimen/carrier_label_height"
+            android:layout_width="match_parent"
+            android:layout_gravity="bottom"
+            />
     <include
         layout="@layout/carrier_label"
         android:layout_height="@dimen/carrier_label_height"
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 552fa4f..d87a0d6 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -343,6 +343,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
 
     // carrier/wifi label
     private TextView mCarrierLabel;
+    private TextView mSubsLabel;
     private boolean mCarrierLabelVisible = false;
     private int mCarrierLabelHeight;
     private int mStatusBarHeaderHeight;
@@ -1043,10 +1044,11 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
             mMSimNetworkController.addEmergencyLabelView(mHeader);
 
             mCarrierLabel = (TextView)mStatusBarWindowContent.findViewById(R.id.carrier_label);
+            mSubsLabel = (TextView)mStatusBarWindowContent.findViewById(R.id.subs_label);
             mShowCarrierInPanel = (mCarrierLabel != null);
 
             if (DEBUG) Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" +
-                                    mShowCarrierInPanel);
+                                    mShowCarrierInPanel + "operator label=" + mSubsLabel);
             if (mShowCarrierInPanel) {
                 mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
 
@@ -1057,6 +1059,8 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
                 } else {
                     mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
                 }
+                mSubsLabel.setVisibility(View.VISIBLE);
+                mMSimNetworkController.addSubsLabelView(mSubsLabel);
                 // set up the dynamic hide/show of the label
                 //mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
                 //    @Override
@@ -1932,14 +1936,30 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         final boolean emergencyCallsShownElsewhere = mContext.getResources().getBoolean(
                 R.bool.config_showEmergencyCallLabelOnly);
 
-        final NetworkControllerImpl networkController = isMSim()
-                ? mMSimNetworkController : mNetworkController;
-        final boolean makeVisible =
-                !(emergencyCallsShownElsewhere && networkController.isEmergencyOnly())
-                && mStackScroller.getHeight() < (mNotificationPanel.getHeight()
-                        - mCarrierLabelHeight - mStatusBarHeaderHeight)
-                && mStackScroller.getVisibility() == View.VISIBLE
-                && mState != StatusBarState.KEYGUARD;
+        final boolean makeVisible ;
+        if (isMSim()) {
+            makeVisible =
+            !(emergencyCallsShownElsewhere && mMSimNetworkController.isEmergencyOnly())
+            && mStackScroller.getHeight() < (mNotificationPanel.getHeight()
+                    - mCarrierLabelHeight - mStatusBarHeaderHeight)
+            && mStackScroller.getVisibility() == View.VISIBLE
+            && mState != StatusBarState.KEYGUARD;
+
+            if (mState == StatusBarState.KEYGUARD) {
+                // The subs are already displayed on the top bar
+                mSubsLabel.setVisibility(View.INVISIBLE);
+            } else {
+                mSubsLabel.setVisibility(View.VISIBLE);
+            }
+        } else {
+            makeVisible =
+            !(emergencyCallsShownElsewhere && mNetworkController.isEmergencyOnly())
+            && mStackScroller.getHeight() < (mNotificationPanel.getHeight()
+                    - mCarrierLabelHeight - mStatusBarHeaderHeight)
+            && mStackScroller.getVisibility() == View.VISIBLE
+            && mState != StatusBarState.KEYGUARD;
+        }
+
 
         if (force || mCarrierLabelVisible != makeVisible) {
             mCarrierLabelVisible = makeVisible;
@@ -3648,6 +3668,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         mRecreating = true;
 
         if (mMSimNetworkController != null) {
+            mMSimNetworkController.clearSubsLabelView();
             mContext.unregisterReceiver(mMSimNetworkController);
         } else if (mNetworkController != null) {
             mContext.unregisterReceiver(mNetworkController);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
index b390180..2cdcf55 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
@@ -98,6 +98,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
     int mPhoneCount = 0;
     private SparseLongArray mPhoneIdSubIdMapping;
     ArrayList<MSimSignalCluster> mSimSignalClusters = new ArrayList<MSimSignalCluster>();
+    ArrayList<TextView> mSubsLabelViews = new ArrayList<TextView>();
 
     public interface MSimSignalCluster {
         void setWifiIndicators(boolean visible, int strengthIcon, int activityIcon,
@@ -437,6 +438,14 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
         }
     }
 
+    public void addSubsLabelView(TextView v) {
+        mSubsLabelViews.add(v);
+    }
+
+    public void clearSubsLabelView() {
+        mSubsLabelViews.clear();
+    }
+
     private void updateCarrierText(int sub) {
         int textResId = 0;
         if (mAirplaneMode) {
@@ -486,10 +495,17 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
             carrierName = carrierName + "    " + mCarrierTextSub[i];
         }
 
-        for (int i = 0; i < mMobileLabelViews.size(); i++) {
-            TextView v = mMobileLabelViews.get(i);
-            v.setText(carrierName);
-            v.setVisibility(View.VISIBLE);
+        if (mContext.getResources().getBoolean(R.bool.config_showDataConnectionView)) {
+            for (int i = 0; i < mSubsLabelViews.size(); i++) {
+                TextView v = mSubsLabelViews.get(i);
+                v.setText(carrierName);
+            }
+        } else {
+            for (int i = 0; i < mMobileLabelViews.size(); i++) {
+                TextView v = mMobileLabelViews.get(i);
+                v.setText(carrierName);
+                v.setVisibility(View.VISIBLE);
+            }
         }
     }
 
-- 
1.9.3 (Apple Git-50)


From 19d8778ed64113f01e6a7c505e80f73a633f339f Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 7 Feb 2015 22:52:44 +0700
Subject: [PATCH 5/5] Revert "Msim: Use SIM display name"

IMO, not a good idea. Default is "SIM 1" and "SIM 2". There are
also roaming cases.

This reverts commit 5220513d5a76689f723b2f3e8a412ec3251b0168.
---
 .../statusbar/policy/MSimNetworkControllerImpl.java     | 17 +++++++----------
 1 file changed, 7 insertions(+), 10 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
index 2cdcf55..d6b48f6 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
@@ -35,7 +35,6 @@ import android.telephony.SubInfoRecord;
 import android.telephony.SubscriptionManager;
 import android.telephony.TelephonyManager;
 import android.util.Slog;
-import android.util.SparseLongArray;
 import android.view.View;
 import android.widget.TextView;
 
@@ -49,6 +48,7 @@ import com.android.systemui.R;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.HashMap;
 
 public class MSimNetworkControllerImpl extends NetworkControllerImpl {
     // debug
@@ -96,7 +96,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
     String[] mSpn;
     String[] mPlmn;
     int mPhoneCount = 0;
-    private SparseLongArray mPhoneIdSubIdMapping;
+    private HashMap<Long, Integer> mSubIdPhoneIdMap;
     ArrayList<MSimSignalCluster> mSimSignalClusters = new ArrayList<MSimSignalCluster>();
     ArrayList<TextView> mSubsLabelViews = new ArrayList<TextView>();
 
@@ -219,7 +219,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
     protected void registerPhoneStateListener(Context context) {
         // telephony
         mPhone = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-        mPhoneIdSubIdMapping = new SparseLongArray();
+        mSubIdPhoneIdMap = new HashMap<Long, Integer>();
         mPhoneCount = TelephonyManager.getDefault().getPhoneCount();
         Slog.d(TAG, "registerPhoneStateListener: " + mPhoneCount);
         mMSimPhoneStateListener = new PhoneStateListener[mPhoneCount];
@@ -230,8 +230,9 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
                 Slog.d(TAG, "registerPhoneStateListener subId: " + subId);
                 Slog.d(TAG, "registerPhoneStateListener slotId: " + i);
                 if (subId > 0) {
-                    mPhoneIdSubIdMapping.put(i, subId);
-                    mMSimPhoneStateListener[i] = getPhoneStateListener(subId, i);
+                    mSubIdPhoneIdMap.put(subId, i);
+                    mMSimPhoneStateListener[i] = getPhoneStateListener(subId,
+                            i);
                     mPhone.listen(mMSimPhoneStateListener[i],
                             PhoneStateListener.LISTEN_SERVICE_STATE
                                     | PhoneStateListener.LISTEN_SIGNAL_STRENGTHS
@@ -976,11 +977,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
                 something = true;
             }
         }
-        if (mPhoneIdSubIdMapping.indexOfKey(phoneId) >= 0) {
-            long sub = mPhoneIdSubIdMapping.get(phoneId);
-            SubInfoRecord sir = SubscriptionManager.getSubInfoForSubscriber(sub);
-            mMSimNetworkName[phoneId] = sir.displayName;
-        } else if (something) {
+        if (something) {
             mMSimNetworkName[phoneId] = str.toString();
         } else {
             mMSimNetworkName[phoneId] = mNetworkNameDefault;
-- 
1.9.3 (Apple Git-50)

